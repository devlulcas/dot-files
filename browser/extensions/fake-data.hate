HATE:{
  "fake_data": {
    "custom_callbacks": {
      "address": "",
      "city": "",
      "company": "",
      "country": "",
      "datetime": "",
      "email": "function fakeEmail() {\n    const domains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'uol.com.br'];\n    const names = ['joao', 'maria', 'carlos', 'ana', 'pedro', 'lucia', 'rafael', 'fernanda', 'bruno', 'camila'];\n    const surnames = ['silva', 'santos', 'oliveira', 'souza', 'rodrigues', 'ferreira', 'alves', 'pereira', 'lima', 'gomes'];\n    \n    const name = names[Math.floor(Math.random() * names.length)];\n    const surname = surnames[Math.floor(Math.random() * surnames.length)];\n    const domain = domains[Math.floor(Math.random() * domains.length)];\n    const number = Math.floor(Math.random() * 999) + 1;\n    \n    return `${name}.${surname}${number}@${domain}`;\n}\n\nreturn fakeEmail();",
      "first_name": "",
      "full_name": "",
      "job_title": "",
      "last_name": "",
      "number": "",
      "paragraph": "",
      "password": "function fakePassword() {\n    const email = fakeData.getLastGeneratedValue('email');\n    return `A1${email}`;\n}\n\nreturn fakePassword();",
      "phone": "function fakePhone() {\n    // Brazilian mobile format: 11 + 9 + 8 digits\n    const areaCodes = ['11', '21', '31', '41', '51', '61', '71', '81', '85', '47'];\n    const areaCode = areaCodes[Math.floor(Math.random() * areaCodes.length)];\n    \n    // Mobile numbers start with 9\n    const firstDigit = '9';\n    \n    // Generate remaining 8 digits\n    let remainingDigits = '';\n    for (let i = 0; i < 8; i++) {\n        remainingDigits += Math.floor(Math.random() * 10);\n    }\n    \n    return areaCode + firstDigit + remainingDigits;\n}\n\nreturn fakePhone();",
      "sentence": "",
      "state": "",
      "text": "",
      "username": "",
      "words": "",
      "zip": "function fakeCep() {\n    const validCeps = [\n        '01310100', // São Paulo - Paulista Avenue\n        '20040020', // Rio de Janeiro - Copacabana\n        '30112000', // Belo Horizonte - Centro\n        '40070110', // Salvador - Pelourinho\n        '80010000', // Curitiba - Centro\n        '60165081', // Fortaleza - Aldeota\n        '52011900', // Recife - Boa Viagem\n        '70040010', // Brasília - Asa Norte\n        '90010150', // Porto Alegre - Centro\n        '66010000', // Belém - Centro\n        '78005000', // Cuiabá - Centro\n        '69005040', // Manaus - Centro\n        '57020000', // Maceió - Centro\n        '64000100', // Teresina - Centro\n        '49010000'  // Aracaju - Centro\n    ];\n    \n    return validCeps[Math.floor(Math.random() * validCeps.length)];\n}\n\nreturn fakeCep();"
    },
    "default_generator_checkboxes": {
      "address": false,
      "city": false,
      "company": false,
      "country": false,
      "datetime": false,
      "email": true,
      "first_name": false,
      "full_name": false,
      "job_title": false,
      "last_name": false,
      "number": false,
      "paragraph": false,
      "password": true,
      "phone": true,
      "sentence": false,
      "state": false,
      "text": false,
      "username": false,
      "words": false,
      "zip": true
    },
    "default_generators_settings": {
      "address": {},
      "city": {},
      "company": {},
      "country": {},
      "datetime": {},
      "email": {},
      "first_name": {},
      "full_name": {},
      "job_title": {},
      "last_name": {},
      "number": {},
      "paragraph": {},
      "password": {},
      "phone": {},
      "sentence": {},
      "state": {},
      "text": {},
      "username": {},
      "words": {},
      "zip": {}
    },
    "custom_generators": [
      {
        "callback": "function fakeCpf() {\n    function generateCpf() {\n        // Generate first 9 digits\n        let cpf = [];\n        for (let i = 0; i < 9; i++) {\n            cpf.push(Math.floor(Math.random() * 10));\n        }\n        \n        // Calculate first verification digit\n        let sum = 0;\n        for (let i = 0; i < 9; i++) {\n            sum += cpf[i] * (10 - i);\n        }\n        let remainder = sum % 11;\n        let firstDigit = remainder < 2 ? 0 : 11 - remainder;\n        cpf.push(firstDigit);\n        \n        // Calculate second verification digit\n        sum = 0;\n        for (let i = 0; i < 10; i++) {\n            sum += cpf[i] * (11 - i);\n        }\n        remainder = sum % 11;\n        let secondDigit = remainder < 2 ? 0 : 11 - remainder;\n        cpf.push(secondDigit);\n        \n        return cpf.join('');\n    }\n    \n    return generateCpf();\n}\n\nreturn fakeCpf();",
        "label": "cpf"
      },
      {
        "callback": "function fakeCnpj() {\n    function generateCnpj() {\n        // Generate first 12 digits (8 base + 4 sequential)\n        let cnpj = [];\n        \n        // First 8 digits (company identifier)\n        for (let i = 0; i < 8; i++) {\n            cnpj.push(Math.floor(Math.random() * 10));\n        }\n        \n        // Next 4 digits (branch identifier, usually 0001)\n        cnpj.push(0, 0, 0, 1);\n        \n        // Calculate first verification digit\n        let weights1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n        let sum = 0;\n        for (let i = 0; i < 12; i++) {\n            sum += cnpj[i] * weights1[i];\n        }\n        let remainder = sum % 11;\n        let firstDigit = remainder < 2 ? 0 : 11 - remainder;\n        cnpj.push(firstDigit);\n        \n        // Calculate second verification digit\n        let weights2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n        sum = 0;\n        for (let i = 0; i < 13; i++) {\n            sum += cnpj[i] * weights2[i];\n        }\n        remainder = sum % 11;\n        let secondDigit = remainder < 2 ? 0 : 11 - remainder;\n        cnpj.push(secondDigit);\n        \n        return cnpj.join('');\n    }\n    \n    return generateCnpj();\n}\n\nreturn fakeCnpj();",
        "label": "cnpj"
      }
    ],
    "settings": {
      "checkbox_behavior": "random",
      "cloud_email_domain": "fakedata.email",
      "cloud_email_prefix": "fd.",
      "cloud_notifications": false,
      "cloud_notifications_badge": true,
      "cloud_notifications_fewer_requests": false,
      "cloud_online": false,
      "cloud_preferred_place_country": "USA",
      "codemirror_enabled": true,
      "custom_integrations": {
        "angular_material": false,
        "google_forms": false,
        "google_sheets": false,
        "public_api_support": false,
        "react_select": false,
        "select2": false,
        "vuetify": false
      },
      "custom_shortcuts": {
        "_execute_action": {
          "action": null,
          "generator": null
        },
        "command-fill-active-field": {
          "action": null,
          "generator": null
        },
        "command-fill-active-form": {
          "action": null,
          "generator": null
        },
        "command-fill-entire-page": {
          "action": null,
          "generator": null
        },
        "command-manage-active-field": {
          "action": null,
          "generator": null
        },
        "custom_shortcut_01": {
          "action": null,
          "generator": null
        },
        "custom_shortcut_02": {
          "action": null,
          "generator": null
        },
        "custom_shortcut_03": {
          "action": null,
          "generator": null
        },
        "custom_shortcut_04": {
          "action": null,
          "generator": null
        },
        "custom_shortcut_05": {
          "action": null,
          "generator": null
        },
        "custom_shortcut_06": {
          "action": null,
          "generator": null
        },
        "custom_shortcut_07": {
          "action": null,
          "generator": null
        },
        "custom_shortcut_08": {
          "action": null,
          "generator": null
        },
        "custom_shortcut_09": {
          "action": null,
          "generator": null
        },
        "custom_shortcut_10": {
          "action": null,
          "generator": null
        }
      },
      "datasets": {},
      "dev_events": {
        "checkbox": [
          "change"
        ],
        "input": [
          "input",
          "change"
        ],
        "select": [
          "change"
        ]
      },
      "fallback_generator": "sentence",
      "fallback_generator_toggle": true,
      "fallback_priority": "fuzzy_first",
      "fill_on_load": false,
      "fill_on_load_observe_dom": false,
      "fill_on_load_urls": [],
      "fill_on_load_urls_type": "blacklist",
      "form_ignore_autocomplete_off": false,
      "form_use_same_password": true,
      "fuzzy_enabled": true,
      "group_default_generators": false,
      "icon_action": "popup",
      "ignore_empty_fields": false,
      "insert_method": "replace",
      "keyboard_shortcut": {
        "keyboard": [
          "Alt"
        ],
        "mouse": "dblclick"
      },
      "keyboard_shortcut_entire_form": {
        "keyboard": [
          "Alt",
          "Shift"
        ],
        "mouse": "dblclick"
      },
      "language": "pt_BR",
      "multi_select_behavior": "random",
      "named_fallback_unnamed": false,
      "popup_auto_fill_on_generate": true,
      "popup_init_goto": "generators",
      "select_behavior": "all",
      "show_in_contextmenu": true
    },
    "loaded_libraries": []
  }
}
